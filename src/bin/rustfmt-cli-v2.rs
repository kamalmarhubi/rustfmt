extern crate clap;

use clap::{App, AppSettings, Arg};

fn main() {
    let _ = App::new("rustfmt")
                    .version(option_env!("CARGO_PKG_VERSION").unwrap_or("dev"))
                    .about("Format Rust code")
                    .setting(AppSettings::UnifiedHelpMessage)
                    .arg(Arg::with_name("format-children")
                         .long("format-children")
                         .short("c")
                         .help("Formats child modules of FILES")
                         .display_order(10))
                    .arg(Arg::with_name("in-place")
                         .long("in-place")
                         .short("i")
                         .help("Edits files in place")
                         .display_order(10))
                    .arg(Arg::with_name("no-backup")
                         .long("no-backup")
                         .short("n")
                         .requires("in-place")
                         .help("Prevents creation of backup files when modifying sources")
                         .display_order(10))
                    .arg(Arg::with_name("diff")
                         .long("diff")
                         .short("d")
                         .conflicts_with("in-place")
                         .help("Output a unified diff of changes")
                         .display_order(20))
                    .arg(Arg::with_name("format-diff")
                         .long("format-diff")
                         .help("Formats parts of files modified in the diff read from stdin")
                         .display_order(20))
                    .arg(Arg::with_name("file-lines")
                         .long("file-lines")
                         .takes_value(true)
                         .value_name("JSON")
                         .help("Formats specified line ranges; see `--help-for file-lines` for details")
                         .display_order(20))
                    .arg(Arg::with_name("coverage")
                         .long("coverage")
                         .conflicts_with_all(&["diff", "in-place"])
                         .help("Display how much of the input file was processed")
                         .display_order(50))
                    .arg(Arg::with_name("verbose")
                         .long("verbose")
                         .short("v")
                         .multiple(true)
                         .help("Be verbose; specify multiple times for more")
                         .display_order(100))
                    .arg(Arg::with_name("FILE")
                         .help("Files to format; if unspecified, will format from stdin instead")
                         .value_name("FILE")
                         .multiple(true)
                         .conflicts_with_all(&["diff", "files-lines"])
                         .index(1))
                    .arg(Arg::with_name("help-for")
                         .long("help-for")
                         .help("Displays detailed help for TOPIC")
                         .takes_value(true)
                         .value_name("TOPIC")
                         .possible_values(&["config", "file-lines"]))
                    .get_matches();
}
